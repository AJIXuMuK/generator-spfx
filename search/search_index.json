{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pnp SPFx Yeoman generator The composeability model of Yeoman generator is on of its core features allow you to build your own or consume and reuse already built generator. The Microsofts SharePoint Framework Yeoman generator supports this model too. The PnP SPFx Yeoman generator uses 100% of the SPFx Yeoman generator and adds functionalities on top of this framework. The extension support ranges from client-side libraries such as pnpjs and jQuery to extend the capabilities to more complex extension such as the integration of HandlebarsJS, VueJS and many more. The PnP SPFx Yeoman generator uses 100% of the Microsoft SPFx Yeoman generator but then adds functionalities on top of this framework. This extension supports additional client-side libraries such as PnPjs or jQuery to extend SPFx capabilities as well as even more complex extensions such as the integration of HandlebarsJS, VueJS, and many more. Limitation: Right now the PnP SPFx yeoman generator supports only the initial setup of new projects. To add additional web parts and extensions, please continue to use the Microsoft SPFx generator. In the future, this generator will be used to add elements to existing projects. Client-side extensions and Add-ons Library Version Documentation jQuery 2.x, 3.x @pnp/pnpjs 1.4. Framework Extensions Framework Version Documentation Handlebars 4.0.0 Get started VueJS planned Get started Angular Elements tbd Get started Installation The generator needs to be installed globally depending on the package manager you use. Using NPM: npm install -g @pnp/generator-spfx Using Yarn: yarn install global @pnp/generator-spfx Using pnpm: pnpm install global-pnpmfile @pnp/generator-spfx Start a new project To start a new project execute the following command: yo @pnp/spfx This will start the PnP SPFx Yeoman generator for a new project that gives you all the options to choose from. Command line options The following options provide a complete list of available switches. Usage: yo @pnp/spfx [ options ] Options: -h, --help # Print the generator s options and usage --skip-cache # Do not remember prompt answers - Default: false --skip-install # Do not automatically install dependencies - Default: false --force-install # Fail on install dependencies error - Default: false --component-description # Web part description --component-name # Web part name --component-type # The type of component: - webpart - extension --enviroment # The target environment for the solution: - onprem or spo . --extension-type # The type of extension: - ApplicationCustomizer , - FieldCustomizer - ListViewCommandSet -pm, --package-manager # Let you choose the package manager: - npm - yarn - pnpm --plusbeta # Use the beta packages --skip-feature-deployment # If specified, allow the tenant admin the choice of being able to deploy the components to all sites immediately without running any feature deployment or adding apps in sites --solution-name # Solution name, as well as folder name Further information General project setup and folders Known Issues","title":"Home"},{"location":"#pnp-spfx-yeoman-generator","text":"The composeability model of Yeoman generator is on of its core features allow you to build your own or consume and reuse already built generator. The Microsofts SharePoint Framework Yeoman generator supports this model too. The PnP SPFx Yeoman generator uses 100% of the SPFx Yeoman generator and adds functionalities on top of this framework. The extension support ranges from client-side libraries such as pnpjs and jQuery to extend the capabilities to more complex extension such as the integration of HandlebarsJS, VueJS and many more. The PnP SPFx Yeoman generator uses 100% of the Microsoft SPFx Yeoman generator but then adds functionalities on top of this framework. This extension supports additional client-side libraries such as PnPjs or jQuery to extend SPFx capabilities as well as even more complex extensions such as the integration of HandlebarsJS, VueJS, and many more. Limitation: Right now the PnP SPFx yeoman generator supports only the initial setup of new projects. To add additional web parts and extensions, please continue to use the Microsoft SPFx generator. In the future, this generator will be used to add elements to existing projects.","title":"Pnp SPFx Yeoman generator"},{"location":"#client-side-extensions-and-add-ons","text":"Library Version Documentation jQuery 2.x, 3.x @pnp/pnpjs 1.4.","title":"Client-side extensions and Add-ons"},{"location":"#framework-extensions","text":"Framework Version Documentation Handlebars 4.0.0 Get started VueJS planned Get started Angular Elements tbd Get started","title":"Framework Extensions"},{"location":"#installation","text":"The generator needs to be installed globally depending on the package manager you use. Using NPM: npm install -g @pnp/generator-spfx Using Yarn: yarn install global @pnp/generator-spfx Using pnpm: pnpm install global-pnpmfile @pnp/generator-spfx","title":"Installation"},{"location":"#start-a-new-project","text":"To start a new project execute the following command: yo @pnp/spfx This will start the PnP SPFx Yeoman generator for a new project that gives you all the options to choose from.","title":"Start a new project"},{"location":"#command-line-options","text":"The following options provide a complete list of available switches. Usage: yo @pnp/spfx [ options ] Options: -h, --help # Print the generator s options and usage --skip-cache # Do not remember prompt answers - Default: false --skip-install # Do not automatically install dependencies - Default: false --force-install # Fail on install dependencies error - Default: false --component-description # Web part description --component-name # Web part name --component-type # The type of component: - webpart - extension --enviroment # The target environment for the solution: - onprem or spo . --extension-type # The type of extension: - ApplicationCustomizer , - FieldCustomizer - ListViewCommandSet -pm, --package-manager # Let you choose the package manager: - npm - yarn - pnpm --plusbeta # Use the beta packages --skip-feature-deployment # If specified, allow the tenant admin the choice of being able to deploy the components to all sites immediately without running any feature deployment or adding apps in sites --solution-name # Solution name, as well as folder name","title":"Command line options"},{"location":"#further-information","text":"General project setup and folders Known Issues","title":"Further information"},{"location":"known-issues/","text":"Known Issues None so far. If you find one please submit to issue to our GitHub Repository .","title":"Known Issues"},{"location":"known-issues/#known-issues","text":"None so far. If you find one please submit to issue to our GitHub Repository .","title":"Known Issues"},{"location":"compose/","text":"Compose custom SPFx generators PnP SPFx Generator - Development Before you start development of custom yeoman generators please be sure to read Writing your own Yeoman Generator . The following chapters explain the overall setup and considerations. Project Setup The following directory listing gives you an overview of the main directories in the generator. \u251c\u2500\u2500 app -- Main Generator \u251c\u2500\u2500 docs -- Documentation \u251c\u2500\u2500 generators -- custom generators \u2502 \u251c\u2500\u2500 addons -- Addon Generator reserved for client libraries only \u2502 \u251c\u2500\u2500 handlebars -- PnP Handlebars generator \u251c\u2500\u2500 lib -- General purpose libraries \u251c\u2500\u2500 test -- Mocha Unit Test \u251c\u2500\u2500 tools \u2502 \u251c\u2500\u2500 generator-template -- Template yeoman generator Get started writing a new generator To get started implementing and adding a new generator, copy the template folder in the generators folder and rename it to a meaningful name matching your framework. In the folder you will find the following files: index.js - main sub generator file promptconfig.js - special prompt config related to sub generator template/addonConfig.json - This file contains all NPM Packages that need to be installed User prompt for sub generator In case the generator need some additional information from the user, questions can be configured in the file promptconfig.js . The content of this file follows the default Yeoman generator user prompting described in the article Interacting with the User . The library Yeoman uses is inquer.js . use strict // These are just sample selection of options const options = [{ name : Option A , value : option-a }, { name : Option B , value : option-b } ]; const configOptions = [ // Sample content of questions { type : list , message : Please add your options in here , name : youroptions , choices : options } // , addon ] const promptConfig = { config : configOptions } module . exports = promptConfig ; This sample exports the configuration as a module and can be integrated in the main Yeoman generator to consolidate the user prompts in the main generator. Generator implementation - index.js All actions required for a new custom generator need to be implemented in the index.js file. The default template currently lists all possible methods in the right call order provided by the default Yeoman generator. // Base Yeoman generator const Generator = require ( yeoman-generator ); // prompt configuration const prompts = require ( ./promptConfig ); module . exports = class extends Generator { constructor ( args , opts ) { super ( args , opts ); // configuration of user prompt } // Initialisation geenerator initializing () { } // Prompt for user input for Custom Generator prompting () { } // adds additonal editor support in this case CSS Comb configuring () { // Currently not supported - Don t use this } // adds additonal editor support in this case CSS Comb writing () { // Currently not supported - Don t use this } // adds additonal editor support in this case CSS Comb install () { /** * Place your custom deployment code in here */ } // Run installer normally time to say goodbye // If yarn is installed yarn will be used end () { } } The call order of a Yeoman generator is defined in the following steps: constructor() initializing() prompting() configuring() writing() install() end() Because of the dependency on the Microsoft Yeoman Generator, the actions need to be delayed to the next step. After the SPFx generator has written the files to the file system through its writing() method, the custom generator is able to update the configuration with additional information. Instead of adding the code of the custom generator to the writing() method, the code has to be added to the install() method. In the case of the Handlebars generator, the following functions get called in the install() method: install () { // deploy additional files to the project directory this . _deployFiles (); // add external to the configuration this . _addExternals (); // add all package depenedencies configured in addonConfig.json. this . _addPackageDependencies (); // inject custom tasks to gulpfile this . _injectToGulpFile (); // finally run install util . runInstall ( this ); } This is required because all additional tasks have to be performed on top of the assets deployed by the SPFx default assets.","title":"Compose"},{"location":"compose/#compose-custom-spfx-generators","text":"","title":"Compose custom SPFx generators"},{"location":"compose/#pnp-spfx-generator-development","text":"Before you start development of custom yeoman generators please be sure to read Writing your own Yeoman Generator . The following chapters explain the overall setup and considerations.","title":"PnP SPFx Generator - Development"},{"location":"compose/#project-setup","text":"The following directory listing gives you an overview of the main directories in the generator. \u251c\u2500\u2500 app -- Main Generator \u251c\u2500\u2500 docs -- Documentation \u251c\u2500\u2500 generators -- custom generators \u2502 \u251c\u2500\u2500 addons -- Addon Generator reserved for client libraries only \u2502 \u251c\u2500\u2500 handlebars -- PnP Handlebars generator \u251c\u2500\u2500 lib -- General purpose libraries \u251c\u2500\u2500 test -- Mocha Unit Test \u251c\u2500\u2500 tools \u2502 \u251c\u2500\u2500 generator-template -- Template yeoman generator","title":"Project Setup"},{"location":"compose/#get-started-writing-a-new-generator","text":"To get started implementing and adding a new generator, copy the template folder in the generators folder and rename it to a meaningful name matching your framework. In the folder you will find the following files: index.js - main sub generator file promptconfig.js - special prompt config related to sub generator template/addonConfig.json - This file contains all NPM Packages that need to be installed","title":"Get started writing a new generator"},{"location":"compose/#user-prompt-for-sub-generator","text":"In case the generator need some additional information from the user, questions can be configured in the file promptconfig.js . The content of this file follows the default Yeoman generator user prompting described in the article Interacting with the User . The library Yeoman uses is inquer.js . use strict // These are just sample selection of options const options = [{ name : Option A , value : option-a }, { name : Option B , value : option-b } ]; const configOptions = [ // Sample content of questions { type : list , message : Please add your options in here , name : youroptions , choices : options } // , addon ] const promptConfig = { config : configOptions } module . exports = promptConfig ; This sample exports the configuration as a module and can be integrated in the main Yeoman generator to consolidate the user prompts in the main generator.","title":"User prompt for sub generator"},{"location":"compose/#generator-implementation-indexjs","text":"All actions required for a new custom generator need to be implemented in the index.js file. The default template currently lists all possible methods in the right call order provided by the default Yeoman generator. // Base Yeoman generator const Generator = require ( yeoman-generator ); // prompt configuration const prompts = require ( ./promptConfig ); module . exports = class extends Generator { constructor ( args , opts ) { super ( args , opts ); // configuration of user prompt } // Initialisation geenerator initializing () { } // Prompt for user input for Custom Generator prompting () { } // adds additonal editor support in this case CSS Comb configuring () { // Currently not supported - Don t use this } // adds additonal editor support in this case CSS Comb writing () { // Currently not supported - Don t use this } // adds additonal editor support in this case CSS Comb install () { /** * Place your custom deployment code in here */ } // Run installer normally time to say goodbye // If yarn is installed yarn will be used end () { } } The call order of a Yeoman generator is defined in the following steps: constructor() initializing() prompting() configuring() writing() install() end() Because of the dependency on the Microsoft Yeoman Generator, the actions need to be delayed to the next step. After the SPFx generator has written the files to the file system through its writing() method, the custom generator is able to update the configuration with additional information. Instead of adding the code of the custom generator to the writing() method, the code has to be added to the install() method. In the case of the Handlebars generator, the following functions get called in the install() method: install () { // deploy additional files to the project directory this . _deployFiles (); // add external to the configuration this . _addExternals (); // add all package depenedencies configured in addonConfig.json. this . _addPackageDependencies (); // inject custom tasks to gulpfile this . _injectToGulpFile (); // finally run install util . runInstall ( this ); } This is required because all additional tasks have to be performed on top of the assets deployed by the SPFx default assets.","title":"Generator implementation - index.js"},{"location":"compose/add-addons/","text":"Step-by-Step Guide for custom addons This section give you an overview of a step by step guide for addons.","title":"Step-by-Step Guide for custom addons"},{"location":"compose/add-addons/#step-by-step-guide-for-custom-addons","text":"This section give you an overview of a step by step guide for addons.","title":"Step-by-Step Guide for custom addons"},{"location":"compose/add-generator/","text":"Step-by-Step Custom generator This sample provides a ste","title":"Step-by-Step Custom generator"},{"location":"compose/add-generator/#step-by-step-custom-generator","text":"This sample provides a ste","title":"Step-by-Step Custom generator"},{"location":"how-tos/","text":"How-Tos This section contains all the important information about how to work with the projects generated by this Yeoman Generator.","title":"How-Tos"},{"location":"how-tos/#how-tos","text":"This section contains all the important information about how to work with the projects generated by this Yeoman Generator.","title":"How-Tos"},{"location":"how-tos/handlebars/","text":"","title":"Handlebars"},{"location":"how-tos/jquery/","text":"How to use jQuery","title":"How to use jQuery"},{"location":"how-tos/jquery/#how-to-use-jquery","text":"","title":"How to use jQuery"},{"location":"recipes/","text":"Recipies for Development In this section you will find useful code snippets and explanations. Yeoman Run install SPFx Inject custom gulp configuration and tasks","title":"Recipes"},{"location":"recipes/#recipies-for-development","text":"In this section you will find useful code snippets and explanations.","title":"Recipies for Development"},{"location":"recipes/#yeoman","text":"Run install","title":"Yeoman"},{"location":"recipes/#spfx","text":"Inject custom gulp configuration and tasks","title":"SPFx"},{"location":"recipes/inject-gulp-tasks/","text":"Inject custom gulp task To inject a custom gulp task into a SharePoint Framework generated gulpfile.js , use the following method. Add a file named gulpfile.js in the templates folder of the custom generator. The following code sample shows the content taken from the Handlebars generator and registers the web pack loader along with a custom gulp watch: const loaderConfig = { test : /\\.hbs/ , loader : handlebars-template-loader }; // Merge custom loader to web pack configuration build . configureWebpack . mergeConfig ({ additionalConfiguration : ( generatedConfiguration ) = { generatedConfiguration . module . rules . push ( loaderConfig ); return generatedConfiguration ; } }); // Register watches sub task to move hbs files over to libs directory let hbsWatch = build . subTask ( hbsWatch , ( gulp , buildOptions , done ) = { gulp . watch ( ./**/*.hbs , () = { gulp . src ( ./src/**/*.hbs ) . pipe ( gulp . dest ( ./lib/ )); }); done (); }); build . rig . addPreBuildTask ( hbsWatch ); This file should only contain the required code that needs added to the SPFx owned gulpfile.js . Add the following code index.js after the end() method: _injectToGulpFile () { if ( fs . existsSync ( this . destinationPath ( gulpfile.js ))) { let coreGulpTemplate = this . templatePath ( ../../../app/templates/gulpfile.js ); let customGulpTemplate = this . templatePath ( ./gulpfile.js ) let mergedGulpFile = util . composeGulpFile ( coreGulpTemplate , customGulpTemplate ); fs . writeFileSync ( this . destinationPath ( ./gulpfile.js ), mergedGulpFile , utf-8 ); } } To execute the injection of your custom task in gulpfile.js , call this method from the install() method: install () { this . _injectToGulpFile (); } To verify, execute the yeoman generator and look up the changes within gulpfile.js in the project directory.","title":"Inject custom gulp task"},{"location":"recipes/inject-gulp-tasks/#inject-custom-gulp-task","text":"To inject a custom gulp task into a SharePoint Framework generated gulpfile.js , use the following method. Add a file named gulpfile.js in the templates folder of the custom generator. The following code sample shows the content taken from the Handlebars generator and registers the web pack loader along with a custom gulp watch: const loaderConfig = { test : /\\.hbs/ , loader : handlebars-template-loader }; // Merge custom loader to web pack configuration build . configureWebpack . mergeConfig ({ additionalConfiguration : ( generatedConfiguration ) = { generatedConfiguration . module . rules . push ( loaderConfig ); return generatedConfiguration ; } }); // Register watches sub task to move hbs files over to libs directory let hbsWatch = build . subTask ( hbsWatch , ( gulp , buildOptions , done ) = { gulp . watch ( ./**/*.hbs , () = { gulp . src ( ./src/**/*.hbs ) . pipe ( gulp . dest ( ./lib/ )); }); done (); }); build . rig . addPreBuildTask ( hbsWatch ); This file should only contain the required code that needs added to the SPFx owned gulpfile.js . Add the following code index.js after the end() method: _injectToGulpFile () { if ( fs . existsSync ( this . destinationPath ( gulpfile.js ))) { let coreGulpTemplate = this . templatePath ( ../../../app/templates/gulpfile.js ); let customGulpTemplate = this . templatePath ( ./gulpfile.js ) let mergedGulpFile = util . composeGulpFile ( coreGulpTemplate , customGulpTemplate ); fs . writeFileSync ( this . destinationPath ( ./gulpfile.js ), mergedGulpFile , utf-8 ); } } To execute the injection of your custom task in gulpfile.js , call this method from the install() method: install () { this . _injectToGulpFile (); } To verify, execute the yeoman generator and look up the changes within gulpfile.js in the project directory.","title":"Inject custom gulp task"},{"location":"recipes/run-install/","text":"Run install npm packages from generator After all required modifications have been applied to a new project by the Yeoman generator, the npm packages need to be installed. To provide a consistent method for all generators, a utility class was implemented that provides a single method to run the installer. Default behaviour of the installer Like the SPFx Default Yeoman generator installer, it supports the following three package managers: npm pnpm yarn Be default, the npm package manager will be used. If the yarn package manager is installed on the client, this package manager will instead be used by default. The pnpm package manager is available via a command line switch when the yeoman generator gets launched. To install dependencies with a specific package manager, the following options exist: To explicitly use npm: yo @pnp/spfx --pm npm or yo @pnp/spfx --package-manager npm To explicitly use pnpm: yo @pnp/spfx --pm pnpm or yo @pnp/spfx --package-manager pnpm To explicitly use pnpm: yo @pnp/spfx --pm yarn or yo @pnp/spfx --package-manager yarn Reference to the Util Your generators index.js should include the following line of code somewhere at the start: // importing utilities const util = require ( ../../lib/util.js ); Call npm package installation Add the following line of code in the install method of your generator: install (){ /* Custom configuration code should be placed before the installer */ util . runInstall ( this ); }","title":"Run install npm packages from generator"},{"location":"recipes/run-install/#run-install-npm-packages-from-generator","text":"After all required modifications have been applied to a new project by the Yeoman generator, the npm packages need to be installed. To provide a consistent method for all generators, a utility class was implemented that provides a single method to run the installer.","title":"Run install npm packages from generator"},{"location":"recipes/run-install/#default-behaviour-of-the-installer","text":"Like the SPFx Default Yeoman generator installer, it supports the following three package managers: npm pnpm yarn Be default, the npm package manager will be used. If the yarn package manager is installed on the client, this package manager will instead be used by default. The pnpm package manager is available via a command line switch when the yeoman generator gets launched. To install dependencies with a specific package manager, the following options exist: To explicitly use npm: yo @pnp/spfx --pm npm or yo @pnp/spfx --package-manager npm To explicitly use pnpm: yo @pnp/spfx --pm pnpm or yo @pnp/spfx --package-manager pnpm To explicitly use pnpm: yo @pnp/spfx --pm yarn or yo @pnp/spfx --package-manager yarn","title":"Default behaviour of the installer"},{"location":"recipes/run-install/#reference-to-the-util","text":"Your generators index.js should include the following line of code somewhere at the start: // importing utilities const util = require ( ../../lib/util.js );","title":"Reference to the Util"},{"location":"recipes/run-install/#call-npm-package-installation","text":"Add the following line of code in the install method of your generator: install (){ /* Custom configuration code should be placed before the installer */ util . runInstall ( this ); }","title":"Call npm package installation"},{"location":"tools/util/","text":"Util - Overview The util module can be found in the './lib/' directory and contains the following methods. mergeAddons(addonConfig, requestedLibraries, config) This method merges add-ons in package.json . addonConfig Configuration of add-ons available in the generator. requestedLibraries Array of requested library identifiers. config Given configuration to merge add-ons in the currently used package.json , for example. composeGulpFile(coreTemplate, customTemplate) This method allows you to inject custom gulp tasks in the gulp file. coreTemplate Path to any gulp file you would like to use as a template. customTemplate Contains all your custom gulp tasks you would like to inject. The core template in the generator provided by SPFx is located in the folder /app/templates/gulpfile.js and contains the following EJS code: use strict ; const gulp = require ( gulp ); const build = require ( @microsoft/sp-build-web ); build . addSuppression ( `Warning - [sass] The local CSS class ms-Grid is not camelCase and will not be type-safe.` ); %= customTasks % build . initialize ( gulp ); The custom generator can point to this file using the following code: let coreGulpTemplate = this . templatePath ( ../../../app/templates/gulpfile.js ); The following example shows a simple custom code snippet that should be included in the gulp file: // code to inject in gulp file console . log ( Hello PnP SPFx generator ); The resulting gulpfile.js after the merge in this case will be: use strict ; const gulp = require ( gulp ); const build = require ( @microsoft/sp-build-web ); build . addSuppression ( `Warning - [sass] The local CSS class ms-Grid is not camelCase and will not be type-safe.` ); // code to inject in gulp file console . log ( Hello PnP SPFx generator ); build . initialize ( gulp );","title":"Util - Overview"},{"location":"tools/util/#util-overview","text":"The util module can be found in the './lib/' directory and contains the following methods.","title":"Util - Overview"},{"location":"tools/util/#mergeaddonsaddonconfig-requestedlibraries-config","text":"This method merges add-ons in package.json . addonConfig Configuration of add-ons available in the generator. requestedLibraries Array of requested library identifiers. config Given configuration to merge add-ons in the currently used package.json , for example.","title":"mergeAddons(addonConfig, requestedLibraries, config)"},{"location":"tools/util/#composegulpfilecoretemplate-customtemplate","text":"This method allows you to inject custom gulp tasks in the gulp file. coreTemplate Path to any gulp file you would like to use as a template. customTemplate Contains all your custom gulp tasks you would like to inject. The core template in the generator provided by SPFx is located in the folder /app/templates/gulpfile.js and contains the following EJS code: use strict ; const gulp = require ( gulp ); const build = require ( @microsoft/sp-build-web ); build . addSuppression ( `Warning - [sass] The local CSS class ms-Grid is not camelCase and will not be type-safe.` ); %= customTasks % build . initialize ( gulp ); The custom generator can point to this file using the following code: let coreGulpTemplate = this . templatePath ( ../../../app/templates/gulpfile.js ); The following example shows a simple custom code snippet that should be included in the gulp file: // code to inject in gulp file console . log ( Hello PnP SPFx generator ); The resulting gulpfile.js after the merge in this case will be: use strict ; const gulp = require ( gulp ); const build = require ( @microsoft/sp-build-web ); build . addSuppression ( `Warning - [sass] The local CSS class ms-Grid is not camelCase and will not be type-safe.` ); // code to inject in gulp file console . log ( Hello PnP SPFx generator ); build . initialize ( gulp );","title":"composeGulpFile(coreTemplate, customTemplate)"}]}